---
alwaysApply: true
---

# 📌 Project Overview

- This project is a **Cloud Governance AI Service**.
- Backend is implemented using **FastAPI** and **FastMCP**.
- Frontend is built using **Streamlit**.
- Developed in **Python**.

---

# ⚙️ Project Conventions

- All **LLM (Large Language Model)** calls must use `get_llm()` or `get_claude_llm()` in [`settings.py`](mdc:core/settings.py).
- Use `get_embeddings()` in [`settings.py`](mdc:core/settings.py) to initialize embedding models.
- Use only libraries listed in [`requirements.txt`](mdc:requirements.txt). Additional libraries can be added as needed.

---

# 🧑‍💻 Coding Rules

1. Analyze the [`api_server_analysis.md`](mdc:api_server_analysis.md) if you need to understand the flow of the [`api_server.py`](mdc:api_server.py)'s code.
2. Analyze the [`mcp_server_analysis.md`](mdc:mcp_server_analysis.md) if you need to understand the flow of the [`mcp_server.py`](mdc:mcp_server.py)'s code.
3. Write code to be as **concise and simple** as possible.
4. Insert **log messages** with logging during key steps for traceability.
5. **Test execution** and ensure all requirements are met before finishing.
6. Log files for [`api_server.py`](mdc:api_server.py) and [`mcp_server.py`](mdc:mcp_server.py) must be **redirected to file logs** and reviewed.

---

# ➕ Additional Guidelines

## 🧪 Testing & Validation

- Implement **unit or integration tests** using `pytest` for major logic.
- Test **Streamlit UIs** using manual workflows or scripted tests.
- Ensure test coverage for **tools and agent interactions**.

## 📁 File Structure

- Maintain modular separation:
  - `core/`: configurations and shared logic
  - `agents/`: multi-agent flows
  - `tools/`: RAG, slide generation, etc.
  - `streamlit/`: Streamlit-based UI

## 📘 Documentation

- Provide inline docstrings or `README.md` per module.
- Keep `.md` documentation updated when new components are added.

## ✅ Code Quality

- Follow **PEP8** style guide.
- Use **type hints** and validate with `mypy`.
- Prefer `pydantic` models for all structured data.

## 🔐 Security & Logging

- Avoid logging **sensitive information** like keys or personal data.
- Use log levels appropriately (`debug`, `info`, `warning`, `error`).
- Store logs in `logs/` and enable log rotation for large files.
